name: Build Android APK

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo-dev cmake libffi-dev libssl-dev wget curl build-essential libffi-dev libssl-dev libxml2-dev libxslt1-dev libjpeg-dev libpng-dev libfreetype6-dev liblcms2-dev libwebp-dev libharfbuzz-dev libfribidi-dev libxcb1-dev automake m4

    - name: Install Python dependencies
      run: |
        pip install "cython<3.0"
        pip install buildozer

    - name: Accept Android SDK licenses
      run: |
        mkdir -p /tmp/.java /tmp/.user
        echo "y" | yes | sdkmanager --licenses || true

    - name: Setup Android SDK manually
      run: |
        # Create Android SDK directory
        mkdir -p /home/runner/.buildozer/android/platform/android-sdk
        
        # Download and install command-line tools
        cd /home/runner/.buildozer/android/platform/android-sdk
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
        unzip -q commandlinetools-linux-11076708_latest.zip
        rm commandlinetools-linux-11076708_latest.zip
        
        # Create the expected directory structure for sdkmanager
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/bin cmdline-tools/lib cmdline-tools/NOTICE.txt cmdline-tools/source.properties cmdline-tools/latest/
        
        # Verify the restructured directory
        echo "Checking restructured cmdline-tools:"
        ls -la cmdline-tools/
        ls -la cmdline-tools/latest/
        ls -la cmdline-tools/latest/bin/
        
        # Create legacy tools directory structure for buildozer compatibility
        mkdir -p tools/bin tools
        
        # Always create wrapper scripts (more reliable than copying)
        SDK_ROOT_PATH="/home/runner/.buildozer/android/platform/android-sdk"
        
        # Create sdkmanager wrapper scripts (use latest path as expected)
        printf '%s\n' '#!/bin/bash' \
          'export JAVA_OPTS="-Djava.util.prefs.systemRoot=/tmp/.java -Djava.util.prefs.userRoot=/tmp/.user"' \
          "exec \"$SDK_ROOT_PATH/cmdline-tools/latest/bin/sdkmanager\" \"\$@\"" > tools/bin/sdkmanager
        chmod +x tools/bin/sdkmanager
        
        printf '%s\n' '#!/bin/bash' \
          'export JAVA_OPTS="-Djava.util.prefs.systemRoot=/tmp/.java -Djava.util.prefs.userRoot=/tmp/.user"' \
          "exec \"$SDK_ROOT_PATH/cmdline-tools/latest/bin/sdkmanager\" \"\$@\"" > tools/sdkmanager
        chmod +x tools/sdkmanager
        
        # Create avdmanager wrapper scripts (use latest path as expected)
        printf '%s\n' '#!/bin/bash' \
          'export JAVA_OPTS="-Djava.util.prefs.systemRoot=/tmp/.java -Djava.util.prefs.userRoot=/tmp/.user"' \
          "exec \"$SDK_ROOT_PATH/cmdline-tools/latest/bin/avdmanager\" \"\$@\"" > tools/bin/avdmanager
        chmod +x tools/bin/avdmanager
        
        printf '%s\n' '#!/bin/bash' \
          'export JAVA_OPTS="-Djava.util.prefs.systemRoot=/tmp/.java -Djava.util.prefs.userRoot=/tmp/.user"' \
          "exec \"$SDK_ROOT_PATH/cmdline-tools/latest/bin/avdmanager\" \"\$@\"" > tools/avdmanager
        chmod +x tools/avdmanager
        
        # Verify wrapper scripts
        echo "Created wrapper scripts:"
        ls -la tools/bin/
        ls -la tools/

    - name: Install Android SDK components
      env:
        ANDROID_HOME: /home/runner/.buildozer/android/platform/android-sdk
        ANDROID_SDK_ROOT: /home/runner/.buildozer/android/platform/android-sdk
        ANDROID_SDK_HOME: /home/runner/.buildozer/android/platform/android-sdk
        ANDROID_USER_HOME: /tmp/.android
        JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
        JAVA_OPTS: "-Djava.util.prefs.systemRoot=/tmp/.java -Djava.util.prefs.userRoot=/tmp/.user"
      run: |
        # Accept all licenses automatically (use latest path as expected)
        echo "y" | yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
        
        # Install required SDK components (use latest path as expected)
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-34"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"

    - name: Fix libffi autotools compatibility
      run: |
        # Set environment variables to fix libffi autotools issues
        export AUTOMAKE="automake --add-missing"
        export ACLOCAL="aclocal -I m4"
        
        # Create a more comprehensive patch for libffi
        cat > /tmp/libffi-fix.sh << 'EOF'
        #!/bin/bash
        
        # Function to apply libffi fixes
        apply_libffi_fixes() {
          local libffi_dir="$1"
          if [ -d "$libffi_dir" ]; then
            echo "Applying libffi fixes to: $libffi_dir"
            
            # Add m4_pattern_allow for LT_SYS_SYMBOL_USCORE
            if [ -f "$libffi_dir/configure.ac" ]; then
              sed -i '/AC_CHECK_LIB(\[dl\], \[dlopen\])/a\m4_pattern_allow([^LT_SYS_SYMBOL_USCORE$])' "$libffi_dir/configure.ac"
            fi
            
            # Update autotools files
            cd "$libffi_dir"
            autoreconf -fiv || true
          fi
        }
        
        # Apply fixes to any libffi directories found
        find /home/runner/.buildozer -name "libffi" -type d | while read dir; do
          apply_libffi_fixes "$dir"
        done
        EOF
        
        chmod +x /tmp/libffi-fix.sh
        /tmp/libffi-fix.sh

    - name: Build APK with Buildozer
      env:
        ANDROID_HOME: /home/runner/.buildozer/android/platform/android-sdk
        ANDROID_SDK_ROOT: /home/runner/.buildozer/android/platform/android-sdk
        ANDROID_SDK_HOME: /home/runner/.buildozer/android/platform/android-sdk
        ANDROID_USER_HOME: /tmp/.android
        JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
        JAVA_OPTS: "-Djava.util.prefs.systemRoot=/tmp/.java -Djava.util.prefs.userRoot=/tmp/.user"
        P4A_DEBUG: 1
        BUILD_DEBUG: 1
        ACCEPT_EULA: "Y"
        # Fix libffi autotools issues
        AUTOMAKE: "automake --add-missing"
        ACLOCAL: "aclocal -I m4"
        # Force libffi to use system version if available
        P4A_LIBFFI: "1"
      run: |
        # Set PATH to include Android SDK tools
        export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/tools:$PATH"
        
        # Debug: Check environment and tools
        echo "=== Environment Debug ==="
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "PATH: $PATH"
        echo "Python version: $(python --version)"
        echo "Buildozer version: $(buildozer --version)"
        
        # Debug: Check Android SDK structure
        echo "=== Android SDK Structure ==="
        ls -la $ANDROID_HOME/
        ls -la $ANDROID_HOME/cmdline-tools/
        ls -la $ANDROID_HOME/cmdline-tools/latest/
        ls -la $ANDROID_HOME/cmdline-tools/latest/bin/
        
        # Debug: Check if sdkmanager works
        echo "=== SDK Manager Test ==="
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --version || echo "sdkmanager version check failed"
        
        # Create a pre-build hook to fix libffi issues
        cat > /tmp/pre_build_hook.py << 'EOF'
        import os
        import shutil
        
        def fix_libffi_issues():
            """Fix libffi autotools compatibility issues"""
            buildozer_dir = os.path.expanduser("~/.buildozer")
            if os.path.exists(buildozer_dir):
                for root, dirs, files in os.walk(buildozer_dir):
                    if "libffi" in root and "configure.ac" in files:
                        configure_ac = os.path.join(root, "configure.ac")
                        print(f"Fixing libffi configure.ac: {configure_ac}")
                        
                        # Read the file
                        with open(configure_ac, 'r') as f:
                            content = f.read()
                        
                        # Add m4_pattern_allow if not present
                        if "m4_pattern_allow([^LT_SYS_SYMBOL_USCORE$])" not in content:
                            content = content.replace(
                                "AC_CHECK_LIB([dl], [dlopen])",
                                "AC_CHECK_LIB([dl], [dlopen])\nm4_pattern_allow([^LT_SYS_SYMBOL_USCORE$])"
                            )
                            
                            # Write back
                            with open(configure_ac, 'w') as f:
                                f.write(content)
                            
                            print(f"Applied libffi fix to: {configure_ac}")
        
        if __name__ == "__main__":
            fix_libffi_issues()
        EOF
        
        python /tmp/pre_build_hook.py
        
        # Try buildozer first, then fallback to python-for-android
        echo "=== Starting Buildozer Build ==="
        buildozer android debug --verbose 2>&1 | tee buildozer.log
        BUILD_EXIT_CODE=$?
        
        # Always show the last part of the log for debugging
        echo "=== Buildozer Build Exit Code: $BUILD_EXIT_CODE ==="
        echo "=== Last 200 lines of buildozer log ==="
        tail -200 buildozer.log || echo "Could not read buildozer.log"
        
        # Check if distribution was created but APK wasn't built
        echo "=== Checking if distribution was created ==="
        DIST_DIR=".buildozer/android/platform/build-arm64-v8a_armeabi-v7a/dists/dialysis_supply_app"
        if [ -d "$DIST_DIR" ]; then
          echo "=== Distribution directory exists ==="
          ls -la "$DIST_DIR"
          
          # Check if APK was built
          if ! find "$DIST_DIR" -name "*.apk" | grep -q .; then
            echo "=== APK not found in distribution directory ==="
            echo "=== Attempting manual APK build with gradlew ==="
            
            cd "$DIST_DIR"
            
            # Make gradlew executable
            if [ -f "gradlew" ]; then
              chmod +x gradlew
              
              echo "=== Running gradlew assembleDebug ==="
              ./gradlew assembleDebug --stacktrace --info 2>&1 | tee gradle_build.log
              
              GRADLE_EXIT_CODE=$?
              echo "=== Gradle exit code: $GRADLE_EXIT_CODE ==="
              
              # Find and copy APK to workspace root
              echo "=== Searching for generated APK ==="
              find . -name "*.apk" -type f -ls
              
              APK_FILE=$(find . -name "*.apk" -type f | head -1)
              if [ -n "$APK_FILE" ]; then
                echo "=== APK found: $APK_FILE ==="
                mkdir -p /home/runner/work/dialysis-supply-app/dialysis-supply-app/bin
                cp "$APK_FILE" /home/runner/work/dialysis-supply-app/dialysis-supply-app/bin/
                echo "=== APK copied to workspace bin directory ==="
                ls -la /home/runner/work/dialysis-supply-app/dialysis-supply-app/bin/
              else
                echo "=== ERROR: APK not found after gradle build ==="
                echo "=== Last 100 lines of gradle build log ==="
                tail -100 gradle_build.log || echo "Could not read gradle log"
              fi
              
              # Return to workspace root
              cd /home/runner/work/dialysis-supply-app/dialysis-supply-app
            else
              echo "=== ERROR: gradlew not found in distribution directory ==="
              echo "=== Contents of distribution directory: ==="
              find "$DIST_DIR" -type f | head -20
            fi
          else
            echo "=== APK already exists in distribution directory ==="
            find "$DIST_DIR" -name "*.apk" -type f -ls
            # Copy to bin directory for easier upload
            mkdir -p bin
            find "$DIST_DIR" -name "*.apk" -type f -exec cp {} bin/ \;
            echo "=== APK copied to bin directory ==="
            ls -la bin/
          fi
        else
          echo "=== Distribution directory not found, will try alternative build methods ==="
        fi
        
        # If buildozer fails, try multiple approaches
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "=== Buildozer failed, trying alternative approaches ==="
          
          # Approach 1: Try python-for-android with minimal requirements
          echo "=== Approach 1: Python-for-Android with minimal requirements ==="
          pip install python-for-android
          
          p4a apk --debug \
            --bootstrap sdl2 \
            --requirements python3,kivy \
            --arch arm64-v8a \
            --name "透析供給装置薬液補充アプリ" \
            --package org.dialysis.supply \
            --version 1.0 \
            --main main.py 2>&1 | tee p4a_minimal.log
          
          P4A_MINIMAL_EXIT_CODE=$?
          echo "=== Python-for-Android Minimal Exit Code: $P4A_MINIMAL_EXIT_CODE ==="
          
          # Approach 2: Try with all requirements but single arch
          if [ $P4A_MINIMAL_EXIT_CODE -ne 0 ]; then
            echo "=== Approach 2: Python-for-Android with single architecture ==="
            p4a apk --debug \
              --bootstrap sdl2 \
              --requirements python3,kivy,kivymd,opencv-python,numpy,Pillow,PyYAML,plyer,pyjnius \
              --arch arm64-v8a \
              --name "透析供給装置薬液補充アプリ" \
              --package org.dialysis.supply \
              --version 1.0 \
              --main main.py 2>&1 | tee p4a_single_arch.log
            
            P4A_SINGLE_EXIT_CODE=$?
            echo "=== Python-for-Android Single Arch Exit Code: $P4A_SINGLE_EXIT_CODE ==="
          fi
          
          # Approach 3: Try with different bootstrap
          if [ $P4A_SINGLE_EXIT_CODE -ne 0 ]; then
            echo "=== Approach 3: Python-for-Android with webview bootstrap ==="
            p4a apk --debug \
              --bootstrap webview \
              --requirements python3,kivy \
              --arch arm64-v8a \
              --name "透析供給装置薬液補充アプリ" \
              --package org.dialysis.supply \
              --version 1.0 \
              --main main.py 2>&1 | tee p4a_webview.log
            
            P4A_WEBVIEW_EXIT_CODE=$?
            echo "=== Python-for-Android Webview Exit Code: $P4A_WEBVIEW_EXIT_CODE ==="
          fi
          
          # Show all logs for debugging
          echo "=== All p4a logs for debugging ==="
          for log_file in p4a_minimal.log p4a_single_arch.log p4a_webview.log; do
            if [ -f "$log_file" ]; then
              echo "=== $log_file ==="
              tail -50 "$log_file" || echo "Could not read $log_file"
            fi
          done
        else
          echo "=== Buildozer completed successfully ==="
        fi

    - name: Investigate build output
      run: |
        echo "=== INVESTIGATION: Searching for APK files anywhere in the workspace ==="
        find . -name "*.apk" -ls 2>/dev/null || echo "No APK files found with find command"
        echo ""
        
        echo "=== INVESTIGATION: Listing contents of buildozer directories ==="
        if [ -d ".buildozer" ]; then
          echo "=== .buildozer directory exists ==="
          ls -la .buildozer/
          
          if [ -d ".buildozer/android" ]; then
            echo "=== .buildozer/android directory exists ==="
            ls -la .buildozer/android/
            
            if [ -d ".buildozer/android/platform" ]; then
              echo "=== .buildozer/android/platform directory exists ==="
              ls -la .buildozer/android/platform/
              
              echo "=== All build directories in platform ==="
              find .buildozer/android/platform -type d -name "build-*" -exec ls -la {} \;
              
              echo "=== All dists directories ==="
              find .buildozer/android/platform -type d -name "dists" -exec ls -la {} \;
              
              echo "=== Contents of all dists directories ==="
              find .buildozer/android/platform -path "*/dists/*" -type d -exec ls -la {} \;
            fi
          fi
        else
          echo "=== .buildozer directory does not exist ==="
        fi
        
        echo ""
        echo "=== INVESTIGATION: Checking for any files with 'apk' in the name ==="
        find . -name "*apk*" -type f -ls 2>/dev/null || echo "No files with 'apk' in name found"
        
        echo ""
        echo "=== INVESTIGATION: Checking bin directory ==="
        if [ -d "bin" ]; then
          echo "=== bin directory exists ==="
          ls -la bin/
        else
          echo "=== bin directory does not exist ==="
        fi
        
        echo ""
        echo "=== INVESTIGATION: Checking current directory for any APK-related files ==="
        ls -la *.apk 2>/dev/null || echo "No APK files in current directory"
        ls -la *apk* 2>/dev/null || echo "No files with 'apk' in current directory"
        
        echo ""
        echo "=== INVESTIGATION: Final comprehensive search ==="
        echo "Searching entire workspace for any APK files..."
        find /home/runner/work/dialysis-supply-app/dialysis-supply-app -name "*.apk" -type f -ls 2>/dev/null || echo "No APK files found in entire workspace"

    - name: Find and Upload APK
      run: |
        # Comprehensive APK file search
        echo "=== Comprehensive APK file search ==="
        
        # Search all directories recursively
        echo "=== Recursive search for APK files ==="
        find . -name "*.apk" -type f -exec ls -la {} \; 2>/dev/null || echo "No APK files found with recursive search"
        
        # Check common buildozer locations
        echo "=== Checking common buildozer locations ==="
        ls -la bin/ 2>/dev/null || echo "bin/ directory not found"
        ls -la .buildozer/ 2>/dev/null || echo ".buildozer/ directory not found"
        
        # Check all possible buildozer output directories
        echo "=== Checking all buildozer output directories ==="
        for dir in .buildozer/android/platform/build-*/dists/*/bin; do
          if [ -d "$dir" ]; then
            echo "=== Found buildozer output directory: $dir ==="
            ls -la "$dir"
          fi
        done
        
        # Check python-for-android output directories
        echo "=== Checking p4a output directories ==="
        for dir in .buildozer/android/platform/build-*/dists; do
          if [ -d "$dir" ]; then
            echo "=== Found p4a output directory: $dir ==="
            find "$dir" -name "*.apk" -type f -exec ls -la {} \;
          fi
        done
        
        # Check current directory and subdirectories
        echo "=== Current directory and subdirectories APK search ==="
        ls -la *.apk 2>/dev/null || echo "No APK files in current directory"
        find . -maxdepth 2 -name "*.apk" -type f -exec ls -la {} \; 2>/dev/null || echo "No APK files in subdirectories"
        
        # Check for any APK files in the entire workspace
        echo "=== Final comprehensive APK search ==="
        find /home/runner/work/dialysis-supply-app/dialysis-supply-app -name "*.apk" -type f 2>/dev/null || echo "No APK files found in entire workspace"

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug.apk
        path: |
          bin/*.apk
          **/*.apk
