name: Build Android APK

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          openjdk-17-jdk \
          git \
          zip \
          unzip \
          wget \
          curl \
          autoconf \
          automake \
          libtool \
          pkg-config \
          cmake \
          libffi-dev \
          libssl-dev \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo-dev \
          build-essential \
          libxml2-dev \
          libxslt1-dev \
          libjpeg-dev \
          libpng-dev \
          libfreetype6-dev \
          liblcms2-dev \
          libwebp-dev \
          libharfbuzz-dev \
          libfribidi-dev \
          libxcb1-dev \
          m4

    - name: Install Python dependencies
      run: |
        pip install "cython<3.0"
        pip install buildozer

    - name: Setup Android SDK
      run: |
        # Android SDK環境変数を設定
        export ANDROID_HOME=$HOME/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
        
        # Java環境変数を設定
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        
        # Android SDKディレクトリを作成
        mkdir -p $ANDROID_HOME
        
        # Command Line Toolsをダウンロード
        cd $ANDROID_HOME
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
        unzip -q commandlinetools-linux-11076708_latest.zip
        rm commandlinetools-linux-11076708_latest.zip
        
        # cmdline-toolsディレクトリ構造を修正
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
        
        # ライセンスを事前に受け入れ
        mkdir -p licenses
        echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > licenses/android-sdk-license
        echo "84831b9409646a918e30573bab4c9c91346d8abd" > licenses/android-sdk-preview-license
        
        # SDKコンポーネントをインストール
        echo "=== SDKライセンスの受け入れ ==="
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
        
        echo "=== 基本SDKコンポーネントのインストール ==="
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-34" "ndk;26.1.10909125"
        
        echo "=== build-toolsのインストール ==="
        # 安定したbuild-toolsバージョンをインストール
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;32.0.0"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;31.0.0"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
        
        echo "=== インストールされたbuild-toolsの確認 ==="
        ls -la $ANDROID_HOME/build-tools/
        
        echo "=== AIDLツールの検索 ==="
        find $ANDROID_HOME -name "aidl" -type f -executable
        echo "=== 各build-toolsバージョンのAIDL ==="
        for version in 33.0.2 32.0.0 31.0.0 30.0.3; do
          if [ -d "$ANDROID_HOME/build-tools/$version" ]; then
            echo "Build-tools $version:"
            ls -la $ANDROID_HOME/build-tools/$version/aidl* 2>/dev/null || echo "  AIDL not found in $version"
            if [ -f "$ANDROID_HOME/build-tools/$version/aidl" ]; then
              echo "  AIDL found: $ANDROID_HOME/build-tools/$version/aidl"
              $ANDROID_HOME/build-tools/$version/aidl --version 2>/dev/null || echo "  Version check failed"
            fi
          fi
        done
        
        # AIDLツールのシンボリックリンクを作成（確実なアクセスのため）
        mkdir -p $ANDROID_HOME/tools
        for version in 33.0.2 32.0.0 31.0.0 30.0.3; do
          if [ -f "$ANDROID_HOME/build-tools/$version/aidl" ]; then
            ln -sf $ANDROID_HOME/build-tools/$version/aidl $ANDROID_HOME/tools/aidl-$version
            echo "Created symlink: $ANDROID_HOME/tools/aidl-$version -> $ANDROID_HOME/build-tools/$version/aidl"
          fi
        done
        
        # 最初に見つかったAIDLツールをデフォルトとして設定
        AIDL_PATH=$(find $ANDROID_HOME -name "aidl" -type f -executable | head -1)
        if [ -n "$AIDL_PATH" ]; then
          ln -sf $AIDL_PATH $ANDROID_HOME/tools/aidl
          echo "Default AIDL: $AIDL_PATH -> $ANDROID_HOME/tools/aidl"
        fi
        
        # 環境変数を永続化
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/33.0.2:$ANDROID_HOME/build-tools/32.0.0:$ANDROID_HOME/build-tools/31.0.0:$ANDROID_HOME/build-tools/30.0.3:$ANDROID_HOME/tools" >> $GITHUB_ENV
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV

    - name: Build APK with Buildozer
      env:
        ANDROID_HOME: ${{ env.ANDROID_HOME }}
        ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        JAVA_HOME: ${{ env.JAVA_HOME }}
        PATH: ${{ env.PATH }}
        ACCEPT_EULA: "Y"
      run: |
        # AIDLツールの最終確認
        echo "=== ビルド前のAIDLツール確認 ==="
        which aidl || echo "AIDL not found in PATH"
        find $ANDROID_HOME -name "aidl" -type f -executable
        echo "=== 利用可能なAIDLツール ==="
        for version in 33.0.2 32.0.0 31.0.0 30.0.3; do
          if [ -f "$ANDROID_HOME/build-tools/$version/aidl" ]; then
            echo "Found AIDL in build-tools/$version: $ANDROID_HOME/build-tools/$version/aidl"
            $ANDROID_HOME/build-tools/$version/aidl --version 2>/dev/null || echo "  Version check failed"
          fi
        done
        
        # シンボリックリンクの確認
        echo "=== シンボリックリンクの確認 ==="
        ls -la $ANDROID_HOME/tools/aidl* 2>/dev/null || echo "No symlinks found"
        
        # AIDLツールの実行テスト
        echo "=== AIDLツールの実行テスト ==="
        if [ -f "$ANDROID_HOME/tools/aidl" ]; then
          echo "Testing default AIDL: $ANDROID_HOME/tools/aidl"
          $ANDROID_HOME/tools/aidl --version 2>/dev/null || echo "Default AIDL test failed"
        fi
        
        # BuildozerでAPKをビルド
        buildozer android debug --verbose

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug.apk
        path: bin/*.apk